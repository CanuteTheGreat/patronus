name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: \${{ steps.create_release.outputs.upload_url }}
      version: \${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "\${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=\${{ github.event.inputs.version }}" >> \$GITHUB_OUTPUT
          else
            echo "version=\${GITHUB_REF#refs/tags/v}" >> \$GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v\${{ steps.get_version.outputs.version }}
          release_name: Patronus SD-WAN v\${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Patronus SD-WAN v\${{ steps.get_version.outputs.version }}

            See [CHANGELOG.md](https://github.com/patronus/patronus/blob/main/CHANGELOG.md) for details.

            ## Downloads

            - Linux (x86_64): patronus-linux-x86_64.tar.gz
            - macOS (x86_64): patronus-macos-x86_64.tar.gz
            - Docker: `docker pull ghcr.io/patronus/patronus-sdwan:v\${{ steps.get_version.outputs.version }}`

            ## Installation

            ```bash
            # Extract archive
            tar xzf patronus-linux-x86_64.tar.gz

            # Install binaries
            sudo cp patronus-sdwan /usr/bin/
            sudo cp patronus-dashboard /usr/bin/

            # Verify installation
            patronus-sdwan --version
            ```

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev pkg-config libssl-dev

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release --workspace

      - name: Strip binaries
        run: |
          strip target/release/patronus-sdwan || true
          strip target/release/patronus-dashboard || true

      - name: Package release
        run: |
          mkdir -p dist
          cp target/release/patronus-sdwan dist/
          cp target/release/patronus-dashboard dist/
          cp README.md LICENSE dist/
          cd dist
          tar czf ../patronus-linux-x86_64.tar.gz *

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: \${{ needs.create-release.outputs.upload_url }}
          asset_path: ./patronus-linux-x86_64.tar.gz
          asset_name: patronus-linux-x86_64.tar.gz
          asset_content_type: application/gzip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Install system dependencies
        run: brew install sqlite openssl@3

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release --workspace

      - name: Strip binaries
        run: |
          strip target/release/patronus-sdwan || true
          strip target/release/patronus-dashboard || true

      - name: Package release
        run: |
          mkdir -p dist
          cp target/release/patronus-sdwan dist/
          cp target/release/patronus-dashboard dist/
          cp README.md LICENSE dist/
          cd dist
          tar czf ../patronus-macos-x86_64.tar.gz *

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: \${{ needs.create-release.outputs.upload_url }}
          asset_path: ./patronus-macos-x86_64.tar.gz
          asset_name: patronus-macos-x86_64.tar.gz
          asset_content_type: application/gzip

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: \${{ github.actor }}
          password: \${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/\${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: \${{ steps.meta.outputs.tags }}
          labels: \${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev pkg-config libssl-dev

      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: \${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p patronus-core
          sleep 10
          cargo publish -p patronus-wireguard
          sleep 10
          cargo publish -p patronus-sdwan
          sleep 10
          cargo publish -p patronus-dashboard
