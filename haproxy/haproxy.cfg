# HAProxy Configuration for Patronus Dashboard HA Setup
# This configuration provides load balancing, health checks, and failover

global
    # Process management
    daemon
    maxconn 4096

    # Logging
    log stdout format raw local0 info

    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Performance tuning
    tune.ssl.default-dh-param 2048

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor except 127.0.0.0/8
    option  redispatch

    # Timeouts
    timeout connect 5s
    timeout client  50s
    timeout server  50s
    timeout tunnel  1h

    # Error handling
    retries 3

    # HTTP error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Statistics endpoint for monitoring
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats auth admin:patronus
    stats show-legends
    stats show-node

# Frontend - accepts client connections
frontend patronus_frontend
    bind *:443 ssl crt /etc/ssl/certs/patronus.pem
    bind *:80

    # Redirect HTTP to HTTPS
    http-request redirect scheme https unless { ssl_fc }

    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"

    # Rate limiting (basic)
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }

    # Route to backend
    default_backend patronus_backend

# Backend - dashboard instances
backend patronus_backend
    # Load balancing algorithm
    # roundrobin: Simple round-robin
    # leastconn: Route to instance with least connections (better for long sessions)
    balance leastconn

    # Health check configuration
    option httpchk GET /health/ready
    http-check expect status 200

    # Session persistence (sticky sessions)
    # Uses JWT token ID for session affinity
    cookie PATRONUS_SERVER insert indirect nocache httponly secure

    # Backend servers
    # Format: server <name> <ip>:<port> [options]
    # Options:
    #   check: Enable health checks
    #   inter: Interval between health checks (default 2s)
    #   rise: Number of successful checks before marking UP (default 2)
    #   fall: Number of failed checks before marking DOWN (default 3)
    #   cookie: Session cookie value
    #   maxconn: Max concurrent connections to this server

    server dashboard1 127.0.0.1:8443 check inter 5s rise 2 fall 3 cookie dash1 maxconn 1000
    server dashboard2 127.0.0.1:8444 check inter 5s rise 2 fall 3 cookie dash2 maxconn 1000 backup
    server dashboard3 127.0.0.1:8445 check inter 5s rise 2 fall 3 cookie dash3 maxconn 1000 backup

    # HTTP check settings
    http-check send-state

    # Server failure detection
    default-server inter 3s fall 3 rise 2 slowstart 60s maxconn 1000 maxqueue 256 weight 100

# WebSocket backend for real-time metrics
backend patronus_websocket
    balance leastconn

    # WebSocket specific settings
    option http-server-close
    timeout tunnel 3600s
    timeout server 3600s

    # Health check
    option httpchk GET /health/ready
    http-check expect status 200

    # Backend servers
    server ws1 127.0.0.1:8443 check inter 5s rise 2 fall 3 maxconn 500
    server ws2 127.0.0.1:8444 check inter 5s rise 2 fall 3 maxconn 500 backup
    server ws3 127.0.0.1:8445 check inter 5s rise 2 fall 3 maxconn 500 backup

# ACL-based routing for WebSocket
frontend patronus_frontend_advanced
    bind *:8443 ssl crt /etc/ssl/certs/patronus.pem

    # Detect WebSocket upgrade
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws

    # Route WebSocket to dedicated backend
    use_backend patronus_websocket if is_websocket
    default_backend patronus_backend

# Prometheus metrics endpoint (optional)
listen prometheus_metrics
    bind *:9101
    mode http
    http-request use-service prometheus-exporter if { path /metrics }
    no log
